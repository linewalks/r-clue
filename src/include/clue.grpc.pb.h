// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: clue.proto
#ifndef GRPC_clue_2eproto__INCLUDED
#define GRPC_clue_2eproto__INCLUDED

#include "clue.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class CLUE final {
 public:
  static constexpr char const* service_full_name() {
    return "CLUE";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AuthLogin(::grpc::ClientContext* context, const ::RequestLogin& request, ::ResponseLogin* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResponseLogin>> AsyncAuthLogin(::grpc::ClientContext* context, const ::RequestLogin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResponseLogin>>(AsyncAuthLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResponseLogin>> PrepareAsyncAuthLogin(::grpc::ClientContext* context, const ::RequestLogin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResponseLogin>>(PrepareAsyncAuthLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCohortList(::grpc::ClientContext* context, const ::RequestCohortList& request, ::ResponseCohortList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResponseCohortList>> AsyncGetCohortList(::grpc::ClientContext* context, const ::RequestCohortList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResponseCohortList>>(AsyncGetCohortListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResponseCohortList>> PrepareAsyncGetCohortList(::grpc::ClientContext* context, const ::RequestCohortList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResponseCohortList>>(PrepareAsyncGetCohortListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::RequestCohortStream, ::PersonInfo>> GetCohortPersonTable(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::RequestCohortStream, ::PersonInfo>>(GetCohortPersonTableRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RequestCohortStream, ::PersonInfo>> AsyncGetCohortPersonTable(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RequestCohortStream, ::PersonInfo>>(AsyncGetCohortPersonTableRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RequestCohortStream, ::PersonInfo>> PrepareAsyncGetCohortPersonTable(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RequestCohortStream, ::PersonInfo>>(PrepareAsyncGetCohortPersonTableRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AuthLogin(::grpc::ClientContext* context, const ::RequestLogin* request, ::ResponseLogin* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AuthLogin(::grpc::ClientContext* context, const ::RequestLogin* request, ::ResponseLogin* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCohortList(::grpc::ClientContext* context, const ::RequestCohortList* request, ::ResponseCohortList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCohortList(::grpc::ClientContext* context, const ::RequestCohortList* request, ::ResponseCohortList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCohortPersonTable(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::RequestCohortStream,::PersonInfo>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ResponseLogin>* AsyncAuthLoginRaw(::grpc::ClientContext* context, const ::RequestLogin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ResponseLogin>* PrepareAsyncAuthLoginRaw(::grpc::ClientContext* context, const ::RequestLogin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ResponseCohortList>* AsyncGetCohortListRaw(::grpc::ClientContext* context, const ::RequestCohortList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ResponseCohortList>* PrepareAsyncGetCohortListRaw(::grpc::ClientContext* context, const ::RequestCohortList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::RequestCohortStream, ::PersonInfo>* GetCohortPersonTableRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::RequestCohortStream, ::PersonInfo>* AsyncGetCohortPersonTableRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::RequestCohortStream, ::PersonInfo>* PrepareAsyncGetCohortPersonTableRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AuthLogin(::grpc::ClientContext* context, const ::RequestLogin& request, ::ResponseLogin* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResponseLogin>> AsyncAuthLogin(::grpc::ClientContext* context, const ::RequestLogin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResponseLogin>>(AsyncAuthLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResponseLogin>> PrepareAsyncAuthLogin(::grpc::ClientContext* context, const ::RequestLogin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResponseLogin>>(PrepareAsyncAuthLoginRaw(context, request, cq));
    }
    ::grpc::Status GetCohortList(::grpc::ClientContext* context, const ::RequestCohortList& request, ::ResponseCohortList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResponseCohortList>> AsyncGetCohortList(::grpc::ClientContext* context, const ::RequestCohortList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResponseCohortList>>(AsyncGetCohortListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResponseCohortList>> PrepareAsyncGetCohortList(::grpc::ClientContext* context, const ::RequestCohortList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResponseCohortList>>(PrepareAsyncGetCohortListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::RequestCohortStream, ::PersonInfo>> GetCohortPersonTable(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::RequestCohortStream, ::PersonInfo>>(GetCohortPersonTableRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::RequestCohortStream, ::PersonInfo>> AsyncGetCohortPersonTable(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::RequestCohortStream, ::PersonInfo>>(AsyncGetCohortPersonTableRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::RequestCohortStream, ::PersonInfo>> PrepareAsyncGetCohortPersonTable(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::RequestCohortStream, ::PersonInfo>>(PrepareAsyncGetCohortPersonTableRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AuthLogin(::grpc::ClientContext* context, const ::RequestLogin* request, ::ResponseLogin* response, std::function<void(::grpc::Status)>) override;
      void AuthLogin(::grpc::ClientContext* context, const ::RequestLogin* request, ::ResponseLogin* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCohortList(::grpc::ClientContext* context, const ::RequestCohortList* request, ::ResponseCohortList* response, std::function<void(::grpc::Status)>) override;
      void GetCohortList(::grpc::ClientContext* context, const ::RequestCohortList* request, ::ResponseCohortList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCohortPersonTable(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::RequestCohortStream,::PersonInfo>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ResponseLogin>* AsyncAuthLoginRaw(::grpc::ClientContext* context, const ::RequestLogin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ResponseLogin>* PrepareAsyncAuthLoginRaw(::grpc::ClientContext* context, const ::RequestLogin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ResponseCohortList>* AsyncGetCohortListRaw(::grpc::ClientContext* context, const ::RequestCohortList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ResponseCohortList>* PrepareAsyncGetCohortListRaw(::grpc::ClientContext* context, const ::RequestCohortList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::RequestCohortStream, ::PersonInfo>* GetCohortPersonTableRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::RequestCohortStream, ::PersonInfo>* AsyncGetCohortPersonTableRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::RequestCohortStream, ::PersonInfo>* PrepareAsyncGetCohortPersonTableRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AuthLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCohortList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCohortPersonTable_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AuthLogin(::grpc::ServerContext* context, const ::RequestLogin* request, ::ResponseLogin* response);
    virtual ::grpc::Status GetCohortList(::grpc::ServerContext* context, const ::RequestCohortList* request, ::ResponseCohortList* response);
    virtual ::grpc::Status GetCohortPersonTable(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::PersonInfo, ::RequestCohortStream>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_AuthLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AuthLogin() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AuthLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthLogin(::grpc::ServerContext* /*context*/, const ::RequestLogin* /*request*/, ::ResponseLogin* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthLogin(::grpc::ServerContext* context, ::RequestLogin* request, ::grpc::ServerAsyncResponseWriter< ::ResponseLogin>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCohortList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCohortList() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCohortList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCohortList(::grpc::ServerContext* /*context*/, const ::RequestCohortList* /*request*/, ::ResponseCohortList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCohortList(::grpc::ServerContext* context, ::RequestCohortList* request, ::grpc::ServerAsyncResponseWriter< ::ResponseCohortList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCohortPersonTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCohortPersonTable() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCohortPersonTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCohortPersonTable(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::PersonInfo, ::RequestCohortStream>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCohortPersonTable(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::PersonInfo, ::RequestCohortStream>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AuthLogin<WithAsyncMethod_GetCohortList<WithAsyncMethod_GetCohortPersonTable<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AuthLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AuthLogin() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::RequestLogin, ::ResponseLogin>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RequestLogin* request, ::ResponseLogin* response) { return this->AuthLogin(context, request, response); }));}
    void SetMessageAllocatorFor_AuthLogin(
        ::grpc::MessageAllocator< ::RequestLogin, ::ResponseLogin>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RequestLogin, ::ResponseLogin>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AuthLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthLogin(::grpc::ServerContext* /*context*/, const ::RequestLogin* /*request*/, ::ResponseLogin* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuthLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::RequestLogin* /*request*/, ::ResponseLogin* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCohortList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCohortList() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::RequestCohortList, ::ResponseCohortList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RequestCohortList* request, ::ResponseCohortList* response) { return this->GetCohortList(context, request, response); }));}
    void SetMessageAllocatorFor_GetCohortList(
        ::grpc::MessageAllocator< ::RequestCohortList, ::ResponseCohortList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RequestCohortList, ::ResponseCohortList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCohortList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCohortList(::grpc::ServerContext* /*context*/, const ::RequestCohortList* /*request*/, ::ResponseCohortList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCohortList(
      ::grpc::CallbackServerContext* /*context*/, const ::RequestCohortList* /*request*/, ::ResponseCohortList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCohortPersonTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCohortPersonTable() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::RequestCohortStream, ::PersonInfo>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->GetCohortPersonTable(context); }));
    }
    ~WithCallbackMethod_GetCohortPersonTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCohortPersonTable(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::PersonInfo, ::RequestCohortStream>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::RequestCohortStream, ::PersonInfo>* GetCohortPersonTable(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_AuthLogin<WithCallbackMethod_GetCohortList<WithCallbackMethod_GetCohortPersonTable<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AuthLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AuthLogin() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AuthLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthLogin(::grpc::ServerContext* /*context*/, const ::RequestLogin* /*request*/, ::ResponseLogin* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCohortList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCohortList() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCohortList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCohortList(::grpc::ServerContext* /*context*/, const ::RequestCohortList* /*request*/, ::ResponseCohortList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCohortPersonTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCohortPersonTable() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCohortPersonTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCohortPersonTable(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::PersonInfo, ::RequestCohortStream>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AuthLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AuthLogin() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AuthLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthLogin(::grpc::ServerContext* /*context*/, const ::RequestLogin* /*request*/, ::ResponseLogin* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCohortList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCohortList() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCohortList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCohortList(::grpc::ServerContext* /*context*/, const ::RequestCohortList* /*request*/, ::ResponseCohortList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCohortList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCohortPersonTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCohortPersonTable() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCohortPersonTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCohortPersonTable(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::PersonInfo, ::RequestCohortStream>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCohortPersonTable(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AuthLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AuthLogin() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AuthLogin(context, request, response); }));
    }
    ~WithRawCallbackMethod_AuthLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthLogin(::grpc::ServerContext* /*context*/, const ::RequestLogin* /*request*/, ::ResponseLogin* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuthLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCohortList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCohortList() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCohortList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCohortList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCohortList(::grpc::ServerContext* /*context*/, const ::RequestCohortList* /*request*/, ::ResponseCohortList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCohortList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCohortPersonTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCohortPersonTable() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->GetCohortPersonTable(context); }));
    }
    ~WithRawCallbackMethod_GetCohortPersonTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCohortPersonTable(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::PersonInfo, ::RequestCohortStream>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetCohortPersonTable(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AuthLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AuthLogin() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RequestLogin, ::ResponseLogin>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RequestLogin, ::ResponseLogin>* streamer) {
                       return this->StreamedAuthLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AuthLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AuthLogin(::grpc::ServerContext* /*context*/, const ::RequestLogin* /*request*/, ::ResponseLogin* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RequestLogin,::ResponseLogin>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCohortList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCohortList() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RequestCohortList, ::ResponseCohortList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RequestCohortList, ::ResponseCohortList>* streamer) {
                       return this->StreamedGetCohortList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCohortList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCohortList(::grpc::ServerContext* /*context*/, const ::RequestCohortList* /*request*/, ::ResponseCohortList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCohortList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RequestCohortList,::ResponseCohortList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AuthLogin<WithStreamedUnaryMethod_GetCohortList<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AuthLogin<WithStreamedUnaryMethod_GetCohortList<Service > > StreamedService;
};


#endif  // GRPC_clue_2eproto__INCLUDED
