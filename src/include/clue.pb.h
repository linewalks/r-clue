// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_clue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_clue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_clue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_clue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clue_2eproto;
class CohortInfo;
struct CohortInfoDefaultTypeInternal;
extern CohortInfoDefaultTypeInternal _CohortInfo_default_instance_;
class PersonInfo;
struct PersonInfoDefaultTypeInternal;
extern PersonInfoDefaultTypeInternal _PersonInfo_default_instance_;
class RequestCohortList;
struct RequestCohortListDefaultTypeInternal;
extern RequestCohortListDefaultTypeInternal _RequestCohortList_default_instance_;
class RequestCohortStream;
struct RequestCohortStreamDefaultTypeInternal;
extern RequestCohortStreamDefaultTypeInternal _RequestCohortStream_default_instance_;
class RequestLogin;
struct RequestLoginDefaultTypeInternal;
extern RequestLoginDefaultTypeInternal _RequestLogin_default_instance_;
class ResponseCohortList;
struct ResponseCohortListDefaultTypeInternal;
extern ResponseCohortListDefaultTypeInternal _ResponseCohortList_default_instance_;
class ResponseLogin;
struct ResponseLoginDefaultTypeInternal;
extern ResponseLoginDefaultTypeInternal _ResponseLogin_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CohortInfo* Arena::CreateMaybeMessage<::CohortInfo>(Arena*);
template<> ::PersonInfo* Arena::CreateMaybeMessage<::PersonInfo>(Arena*);
template<> ::RequestCohortList* Arena::CreateMaybeMessage<::RequestCohortList>(Arena*);
template<> ::RequestCohortStream* Arena::CreateMaybeMessage<::RequestCohortStream>(Arena*);
template<> ::RequestLogin* Arena::CreateMaybeMessage<::RequestLogin>(Arena*);
template<> ::ResponseCohortList* Arena::CreateMaybeMessage<::ResponseCohortList>(Arena*);
template<> ::ResponseLogin* Arena::CreateMaybeMessage<::ResponseLogin>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RequestLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestLogin) */ {
 public:
  inline RequestLogin() : RequestLogin(nullptr) {}
  ~RequestLogin() override;
  explicit constexpr RequestLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestLogin(const RequestLogin& from);
  RequestLogin(RequestLogin&& from) noexcept
    : RequestLogin() {
    *this = ::std::move(from);
  }

  inline RequestLogin& operator=(const RequestLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestLogin& operator=(RequestLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestLogin* internal_default_instance() {
    return reinterpret_cast<const RequestLogin*>(
               &_RequestLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestLogin& a, RequestLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestLogin* New() const final {
    return new RequestLogin();
  }

  RequestLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestLogin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestLogin";
  }
  protected:
  explicit RequestLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:RequestLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clue_2eproto;
};
// -------------------------------------------------------------------

class ResponseLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResponseLogin) */ {
 public:
  inline ResponseLogin() : ResponseLogin(nullptr) {}
  ~ResponseLogin() override;
  explicit constexpr ResponseLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseLogin(const ResponseLogin& from);
  ResponseLogin(ResponseLogin&& from) noexcept
    : ResponseLogin() {
    *this = ::std::move(from);
  }

  inline ResponseLogin& operator=(const ResponseLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseLogin& operator=(ResponseLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseLogin* internal_default_instance() {
    return reinterpret_cast<const ResponseLogin*>(
               &_ResponseLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseLogin& a, ResponseLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseLogin* New() const final {
    return new ResponseLogin();
  }

  ResponseLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseLogin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResponseLogin";
  }
  protected:
  explicit ResponseLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
    kRefreshTokenFieldNumber = 2,
  };
  // string access_token = 1;
  void clear_access_token();
  const std::string& access_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string refresh_token = 2;
  void clear_refresh_token();
  const std::string& refresh_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_refresh_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_refresh_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_refresh_token();
  void set_allocated_refresh_token(std::string* refresh_token);
  private:
  const std::string& _internal_refresh_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refresh_token(const std::string& value);
  std::string* _internal_mutable_refresh_token();
  public:

  // @@protoc_insertion_point(class_scope:ResponseLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refresh_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clue_2eproto;
};
// -------------------------------------------------------------------

class RequestCohortList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestCohortList) */ {
 public:
  inline RequestCohortList() : RequestCohortList(nullptr) {}
  ~RequestCohortList() override;
  explicit constexpr RequestCohortList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestCohortList(const RequestCohortList& from);
  RequestCohortList(RequestCohortList&& from) noexcept
    : RequestCohortList() {
    *this = ::std::move(from);
  }

  inline RequestCohortList& operator=(const RequestCohortList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestCohortList& operator=(RequestCohortList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestCohortList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestCohortList* internal_default_instance() {
    return reinterpret_cast<const RequestCohortList*>(
               &_RequestCohortList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestCohortList& a, RequestCohortList& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestCohortList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestCohortList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestCohortList* New() const final {
    return new RequestCohortList();
  }

  RequestCohortList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestCohortList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestCohortList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestCohortList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestCohortList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestCohortList";
  }
  protected:
  explicit RequestCohortList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kPageFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // string term = 1;
  void clear_term();
  const std::string& term() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_term(ArgT0&& arg0, ArgT... args);
  std::string* mutable_term();
  PROTOBUF_MUST_USE_RESULT std::string* release_term();
  void set_allocated_term(std::string* term);
  private:
  const std::string& _internal_term() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_term(const std::string& value);
  std::string* _internal_mutable_term();
  public:

  // int32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 length = 3;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RequestCohortList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr term_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clue_2eproto;
};
// -------------------------------------------------------------------

class CohortInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CohortInfo) */ {
 public:
  inline CohortInfo() : CohortInfo(nullptr) {}
  ~CohortInfo() override;
  explicit constexpr CohortInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CohortInfo(const CohortInfo& from);
  CohortInfo(CohortInfo&& from) noexcept
    : CohortInfo() {
    *this = ::std::move(from);
  }

  inline CohortInfo& operator=(const CohortInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CohortInfo& operator=(CohortInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CohortInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CohortInfo* internal_default_instance() {
    return reinterpret_cast<const CohortInfo*>(
               &_CohortInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CohortInfo& a, CohortInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CohortInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CohortInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CohortInfo* New() const final {
    return new CohortInfo();
  }

  CohortInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CohortInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CohortInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CohortInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CohortInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CohortInfo";
  }
  protected:
  explicit CohortInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CohortInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clue_2eproto;
};
// -------------------------------------------------------------------

class ResponseCohortList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResponseCohortList) */ {
 public:
  inline ResponseCohortList() : ResponseCohortList(nullptr) {}
  ~ResponseCohortList() override;
  explicit constexpr ResponseCohortList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseCohortList(const ResponseCohortList& from);
  ResponseCohortList(ResponseCohortList&& from) noexcept
    : ResponseCohortList() {
    *this = ::std::move(from);
  }

  inline ResponseCohortList& operator=(const ResponseCohortList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseCohortList& operator=(ResponseCohortList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseCohortList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseCohortList* internal_default_instance() {
    return reinterpret_cast<const ResponseCohortList*>(
               &_ResponseCohortList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResponseCohortList& a, ResponseCohortList& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseCohortList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseCohortList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseCohortList* New() const final {
    return new ResponseCohortList();
  }

  ResponseCohortList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseCohortList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseCohortList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseCohortList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseCohortList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResponseCohortList";
  }
  protected:
  explicit ResponseCohortList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCohortListFieldNumber = 1,
  };
  // repeated .CohortInfo cohort_list = 1;
  int cohort_list_size() const;
  private:
  int _internal_cohort_list_size() const;
  public:
  void clear_cohort_list();
  ::CohortInfo* mutable_cohort_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CohortInfo >*
      mutable_cohort_list();
  private:
  const ::CohortInfo& _internal_cohort_list(int index) const;
  ::CohortInfo* _internal_add_cohort_list();
  public:
  const ::CohortInfo& cohort_list(int index) const;
  ::CohortInfo* add_cohort_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CohortInfo >&
      cohort_list() const;

  // @@protoc_insertion_point(class_scope:ResponseCohortList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CohortInfo > cohort_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clue_2eproto;
};
// -------------------------------------------------------------------

class RequestCohortStream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestCohortStream) */ {
 public:
  inline RequestCohortStream() : RequestCohortStream(nullptr) {}
  ~RequestCohortStream() override;
  explicit constexpr RequestCohortStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestCohortStream(const RequestCohortStream& from);
  RequestCohortStream(RequestCohortStream&& from) noexcept
    : RequestCohortStream() {
    *this = ::std::move(from);
  }

  inline RequestCohortStream& operator=(const RequestCohortStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestCohortStream& operator=(RequestCohortStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestCohortStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestCohortStream* internal_default_instance() {
    return reinterpret_cast<const RequestCohortStream*>(
               &_RequestCohortStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RequestCohortStream& a, RequestCohortStream& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestCohortStream* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestCohortStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestCohortStream* New() const final {
    return new RequestCohortStream();
  }

  RequestCohortStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestCohortStream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestCohortStream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestCohortStream& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestCohortStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestCohortStream";
  }
  protected:
  explicit RequestCohortStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFetchNumFieldNumber = 1,
    kCohortIdFieldNumber = 2,
  };
  // int32 fetch_num = 1;
  void clear_fetch_num();
  ::PROTOBUF_NAMESPACE_ID::int32 fetch_num() const;
  void set_fetch_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fetch_num() const;
  void _internal_set_fetch_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cohort_id = 2;
  void clear_cohort_id();
  ::PROTOBUF_NAMESPACE_ID::int32 cohort_id() const;
  void set_cohort_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cohort_id() const;
  void _internal_set_cohort_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RequestCohortStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fetch_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 cohort_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clue_2eproto;
};
// -------------------------------------------------------------------

class PersonInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PersonInfo) */ {
 public:
  inline PersonInfo() : PersonInfo(nullptr) {}
  ~PersonInfo() override;
  explicit constexpr PersonInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PersonInfo(const PersonInfo& from);
  PersonInfo(PersonInfo&& from) noexcept
    : PersonInfo() {
    *this = ::std::move(from);
  }

  inline PersonInfo& operator=(const PersonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonInfo& operator=(PersonInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersonInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersonInfo* internal_default_instance() {
    return reinterpret_cast<const PersonInfo*>(
               &_PersonInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PersonInfo& a, PersonInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PersonInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersonInfo* New() const final {
    return new PersonInfo();
  }

  PersonInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersonInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PersonInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PersonInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PersonInfo";
  }
  protected:
  explicit PersonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonSourceValueFieldNumber = 11,
    kGenderSourceValueFieldNumber = 12,
    kRaceSourceValueFieldNumber = 14,
    kEthnicitySourceValueFieldNumber = 16,
    kPersonIdFieldNumber = 1,
    kGenderConceptIdFieldNumber = 2,
    kYearOfBirthFieldNumber = 3,
    kMonthOfBirthFieldNumber = 4,
    kDayOfBirthFieldNumber = 5,
    kRaceConceptIdFieldNumber = 6,
    kEthnicityConceptIdFieldNumber = 7,
    kLocationIdFieldNumber = 8,
    kProviderIdFieldNumber = 9,
    kCareSiteIdFieldNumber = 10,
    kGenderSourceConceptIdFieldNumber = 13,
    kRaceSourceConceptIdFieldNumber = 15,
    kEthnicitySourceConceptIdFieldNumber = 17,
  };
  // string person_source_value = 11;
  void clear_person_source_value();
  const std::string& person_source_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_person_source_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_person_source_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_person_source_value();
  void set_allocated_person_source_value(std::string* person_source_value);
  private:
  const std::string& _internal_person_source_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_person_source_value(const std::string& value);
  std::string* _internal_mutable_person_source_value();
  public:

  // string gender_source_value = 12;
  void clear_gender_source_value();
  const std::string& gender_source_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gender_source_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gender_source_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_gender_source_value();
  void set_allocated_gender_source_value(std::string* gender_source_value);
  private:
  const std::string& _internal_gender_source_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gender_source_value(const std::string& value);
  std::string* _internal_mutable_gender_source_value();
  public:

  // string race_source_value = 14;
  void clear_race_source_value();
  const std::string& race_source_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_race_source_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_race_source_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_race_source_value();
  void set_allocated_race_source_value(std::string* race_source_value);
  private:
  const std::string& _internal_race_source_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_race_source_value(const std::string& value);
  std::string* _internal_mutable_race_source_value();
  public:

  // string ethnicity_source_value = 16;
  void clear_ethnicity_source_value();
  const std::string& ethnicity_source_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ethnicity_source_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ethnicity_source_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_ethnicity_source_value();
  void set_allocated_ethnicity_source_value(std::string* ethnicity_source_value);
  private:
  const std::string& _internal_ethnicity_source_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ethnicity_source_value(const std::string& value);
  std::string* _internal_mutable_ethnicity_source_value();
  public:

  // int32 person_id = 1;
  void clear_person_id();
  ::PROTOBUF_NAMESPACE_ID::int32 person_id() const;
  void set_person_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_person_id() const;
  void _internal_set_person_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gender_concept_id = 2;
  void clear_gender_concept_id();
  ::PROTOBUF_NAMESPACE_ID::int32 gender_concept_id() const;
  void set_gender_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gender_concept_id() const;
  void _internal_set_gender_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 year_of_birth = 3;
  void clear_year_of_birth();
  ::PROTOBUF_NAMESPACE_ID::int32 year_of_birth() const;
  void set_year_of_birth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year_of_birth() const;
  void _internal_set_year_of_birth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 month_of_birth = 4;
  void clear_month_of_birth();
  ::PROTOBUF_NAMESPACE_ID::int32 month_of_birth() const;
  void set_month_of_birth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month_of_birth() const;
  void _internal_set_month_of_birth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 day_of_birth = 5;
  void clear_day_of_birth();
  ::PROTOBUF_NAMESPACE_ID::int32 day_of_birth() const;
  void set_day_of_birth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_of_birth() const;
  void _internal_set_day_of_birth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 race_concept_id = 6;
  void clear_race_concept_id();
  ::PROTOBUF_NAMESPACE_ID::int32 race_concept_id() const;
  void set_race_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_race_concept_id() const;
  void _internal_set_race_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ethnicity_concept_id = 7;
  void clear_ethnicity_concept_id();
  ::PROTOBUF_NAMESPACE_ID::int32 ethnicity_concept_id() const;
  void set_ethnicity_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ethnicity_concept_id() const;
  void _internal_set_ethnicity_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 location_id = 8;
  void clear_location_id();
  ::PROTOBUF_NAMESPACE_ID::int32 location_id() const;
  void set_location_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location_id() const;
  void _internal_set_location_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 provider_id = 9;
  void clear_provider_id();
  ::PROTOBUF_NAMESPACE_ID::int32 provider_id() const;
  void set_provider_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_provider_id() const;
  void _internal_set_provider_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 care_site_id = 10;
  void clear_care_site_id();
  ::PROTOBUF_NAMESPACE_ID::int32 care_site_id() const;
  void set_care_site_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_care_site_id() const;
  void _internal_set_care_site_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gender_source_concept_id = 13;
  void clear_gender_source_concept_id();
  ::PROTOBUF_NAMESPACE_ID::int32 gender_source_concept_id() const;
  void set_gender_source_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gender_source_concept_id() const;
  void _internal_set_gender_source_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 race_source_concept_id = 15;
  void clear_race_source_concept_id();
  ::PROTOBUF_NAMESPACE_ID::int32 race_source_concept_id() const;
  void set_race_source_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_race_source_concept_id() const;
  void _internal_set_race_source_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ethnicity_source_concept_id = 17;
  void clear_ethnicity_source_concept_id();
  ::PROTOBUF_NAMESPACE_ID::int32 ethnicity_source_concept_id() const;
  void set_ethnicity_source_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ethnicity_source_concept_id() const;
  void _internal_set_ethnicity_source_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PersonInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr person_source_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gender_source_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr race_source_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ethnicity_source_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 person_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 gender_concept_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_of_birth_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_of_birth_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_of_birth_;
  ::PROTOBUF_NAMESPACE_ID::int32 race_concept_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ethnicity_concept_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 provider_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 care_site_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 gender_source_concept_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 race_source_concept_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ethnicity_source_concept_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestLogin

// string email = 1;
inline void RequestLogin::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& RequestLogin::email() const {
  // @@protoc_insertion_point(field_get:RequestLogin.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestLogin::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RequestLogin.email)
}
inline std::string* RequestLogin::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:RequestLogin.email)
  return _s;
}
inline const std::string& RequestLogin::_internal_email() const {
  return email_.Get();
}
inline void RequestLogin::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestLogin::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestLogin::release_email() {
  // @@protoc_insertion_point(field_release:RequestLogin.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestLogin::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RequestLogin.email)
}

// string password = 2;
inline void RequestLogin::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& RequestLogin::password() const {
  // @@protoc_insertion_point(field_get:RequestLogin.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestLogin::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RequestLogin.password)
}
inline std::string* RequestLogin::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:RequestLogin.password)
  return _s;
}
inline const std::string& RequestLogin::_internal_password() const {
  return password_.Get();
}
inline void RequestLogin::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestLogin::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestLogin::release_password() {
  // @@protoc_insertion_point(field_release:RequestLogin.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RequestLogin.password)
}

// -------------------------------------------------------------------

// ResponseLogin

// string access_token = 1;
inline void ResponseLogin::clear_access_token() {
  access_token_.ClearToEmpty();
}
inline const std::string& ResponseLogin::access_token() const {
  // @@protoc_insertion_point(field_get:ResponseLogin.access_token)
  return _internal_access_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseLogin::set_access_token(ArgT0&& arg0, ArgT... args) {
 
 access_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResponseLogin.access_token)
}
inline std::string* ResponseLogin::mutable_access_token() {
  std::string* _s = _internal_mutable_access_token();
  // @@protoc_insertion_point(field_mutable:ResponseLogin.access_token)
  return _s;
}
inline const std::string& ResponseLogin::_internal_access_token() const {
  return access_token_.Get();
}
inline void ResponseLogin::_internal_set_access_token(const std::string& value) {
  
  access_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseLogin::_internal_mutable_access_token() {
  
  return access_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseLogin::release_access_token() {
  // @@protoc_insertion_point(field_release:ResponseLogin.access_token)
  return access_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseLogin::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ResponseLogin.access_token)
}

// string refresh_token = 2;
inline void ResponseLogin::clear_refresh_token() {
  refresh_token_.ClearToEmpty();
}
inline const std::string& ResponseLogin::refresh_token() const {
  // @@protoc_insertion_point(field_get:ResponseLogin.refresh_token)
  return _internal_refresh_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseLogin::set_refresh_token(ArgT0&& arg0, ArgT... args) {
 
 refresh_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResponseLogin.refresh_token)
}
inline std::string* ResponseLogin::mutable_refresh_token() {
  std::string* _s = _internal_mutable_refresh_token();
  // @@protoc_insertion_point(field_mutable:ResponseLogin.refresh_token)
  return _s;
}
inline const std::string& ResponseLogin::_internal_refresh_token() const {
  return refresh_token_.Get();
}
inline void ResponseLogin::_internal_set_refresh_token(const std::string& value) {
  
  refresh_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseLogin::_internal_mutable_refresh_token() {
  
  return refresh_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseLogin::release_refresh_token() {
  // @@protoc_insertion_point(field_release:ResponseLogin.refresh_token)
  return refresh_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseLogin::set_allocated_refresh_token(std::string* refresh_token) {
  if (refresh_token != nullptr) {
    
  } else {
    
  }
  refresh_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refresh_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ResponseLogin.refresh_token)
}

// -------------------------------------------------------------------

// RequestCohortList

// string term = 1;
inline void RequestCohortList::clear_term() {
  term_.ClearToEmpty();
}
inline const std::string& RequestCohortList::term() const {
  // @@protoc_insertion_point(field_get:RequestCohortList.term)
  return _internal_term();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestCohortList::set_term(ArgT0&& arg0, ArgT... args) {
 
 term_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RequestCohortList.term)
}
inline std::string* RequestCohortList::mutable_term() {
  std::string* _s = _internal_mutable_term();
  // @@protoc_insertion_point(field_mutable:RequestCohortList.term)
  return _s;
}
inline const std::string& RequestCohortList::_internal_term() const {
  return term_.Get();
}
inline void RequestCohortList::_internal_set_term(const std::string& value) {
  
  term_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestCohortList::_internal_mutable_term() {
  
  return term_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestCohortList::release_term() {
  // @@protoc_insertion_point(field_release:RequestCohortList.term)
  return term_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestCohortList::set_allocated_term(std::string* term) {
  if (term != nullptr) {
    
  } else {
    
  }
  term_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), term,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RequestCohortList.term)
}

// int32 page = 2;
inline void RequestCohortList::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestCohortList::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestCohortList::page() const {
  // @@protoc_insertion_point(field_get:RequestCohortList.page)
  return _internal_page();
}
inline void RequestCohortList::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void RequestCohortList::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:RequestCohortList.page)
}

// int32 length = 3;
inline void RequestCohortList::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestCohortList::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestCohortList::length() const {
  // @@protoc_insertion_point(field_get:RequestCohortList.length)
  return _internal_length();
}
inline void RequestCohortList::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
}
inline void RequestCohortList::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:RequestCohortList.length)
}

// -------------------------------------------------------------------

// CohortInfo

// int32 id = 1;
inline void CohortInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CohortInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CohortInfo::id() const {
  // @@protoc_insertion_point(field_get:CohortInfo.id)
  return _internal_id();
}
inline void CohortInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CohortInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CohortInfo.id)
}

// string name = 2;
inline void CohortInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CohortInfo::name() const {
  // @@protoc_insertion_point(field_get:CohortInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CohortInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CohortInfo.name)
}
inline std::string* CohortInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CohortInfo.name)
  return _s;
}
inline const std::string& CohortInfo::_internal_name() const {
  return name_.Get();
}
inline void CohortInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CohortInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CohortInfo::release_name() {
  // @@protoc_insertion_point(field_release:CohortInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CohortInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CohortInfo.name)
}

// -------------------------------------------------------------------

// ResponseCohortList

// repeated .CohortInfo cohort_list = 1;
inline int ResponseCohortList::_internal_cohort_list_size() const {
  return cohort_list_.size();
}
inline int ResponseCohortList::cohort_list_size() const {
  return _internal_cohort_list_size();
}
inline void ResponseCohortList::clear_cohort_list() {
  cohort_list_.Clear();
}
inline ::CohortInfo* ResponseCohortList::mutable_cohort_list(int index) {
  // @@protoc_insertion_point(field_mutable:ResponseCohortList.cohort_list)
  return cohort_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CohortInfo >*
ResponseCohortList::mutable_cohort_list() {
  // @@protoc_insertion_point(field_mutable_list:ResponseCohortList.cohort_list)
  return &cohort_list_;
}
inline const ::CohortInfo& ResponseCohortList::_internal_cohort_list(int index) const {
  return cohort_list_.Get(index);
}
inline const ::CohortInfo& ResponseCohortList::cohort_list(int index) const {
  // @@protoc_insertion_point(field_get:ResponseCohortList.cohort_list)
  return _internal_cohort_list(index);
}
inline ::CohortInfo* ResponseCohortList::_internal_add_cohort_list() {
  return cohort_list_.Add();
}
inline ::CohortInfo* ResponseCohortList::add_cohort_list() {
  ::CohortInfo* _add = _internal_add_cohort_list();
  // @@protoc_insertion_point(field_add:ResponseCohortList.cohort_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CohortInfo >&
ResponseCohortList::cohort_list() const {
  // @@protoc_insertion_point(field_list:ResponseCohortList.cohort_list)
  return cohort_list_;
}

// -------------------------------------------------------------------

// RequestCohortStream

// int32 fetch_num = 1;
inline void RequestCohortStream::clear_fetch_num() {
  fetch_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestCohortStream::_internal_fetch_num() const {
  return fetch_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestCohortStream::fetch_num() const {
  // @@protoc_insertion_point(field_get:RequestCohortStream.fetch_num)
  return _internal_fetch_num();
}
inline void RequestCohortStream::_internal_set_fetch_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fetch_num_ = value;
}
inline void RequestCohortStream::set_fetch_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fetch_num(value);
  // @@protoc_insertion_point(field_set:RequestCohortStream.fetch_num)
}

// int32 cohort_id = 2;
inline void RequestCohortStream::clear_cohort_id() {
  cohort_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestCohortStream::_internal_cohort_id() const {
  return cohort_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestCohortStream::cohort_id() const {
  // @@protoc_insertion_point(field_get:RequestCohortStream.cohort_id)
  return _internal_cohort_id();
}
inline void RequestCohortStream::_internal_set_cohort_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cohort_id_ = value;
}
inline void RequestCohortStream::set_cohort_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cohort_id(value);
  // @@protoc_insertion_point(field_set:RequestCohortStream.cohort_id)
}

// -------------------------------------------------------------------

// PersonInfo

// int32 person_id = 1;
inline void PersonInfo::clear_person_id() {
  person_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_person_id() const {
  return person_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::person_id() const {
  // @@protoc_insertion_point(field_get:PersonInfo.person_id)
  return _internal_person_id();
}
inline void PersonInfo::_internal_set_person_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  person_id_ = value;
}
inline void PersonInfo::set_person_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_person_id(value);
  // @@protoc_insertion_point(field_set:PersonInfo.person_id)
}

// int32 gender_concept_id = 2;
inline void PersonInfo::clear_gender_concept_id() {
  gender_concept_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_gender_concept_id() const {
  return gender_concept_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::gender_concept_id() const {
  // @@protoc_insertion_point(field_get:PersonInfo.gender_concept_id)
  return _internal_gender_concept_id();
}
inline void PersonInfo::_internal_set_gender_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gender_concept_id_ = value;
}
inline void PersonInfo::set_gender_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gender_concept_id(value);
  // @@protoc_insertion_point(field_set:PersonInfo.gender_concept_id)
}

// int32 year_of_birth = 3;
inline void PersonInfo::clear_year_of_birth() {
  year_of_birth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_year_of_birth() const {
  return year_of_birth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::year_of_birth() const {
  // @@protoc_insertion_point(field_get:PersonInfo.year_of_birth)
  return _internal_year_of_birth();
}
inline void PersonInfo::_internal_set_year_of_birth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  year_of_birth_ = value;
}
inline void PersonInfo::set_year_of_birth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year_of_birth(value);
  // @@protoc_insertion_point(field_set:PersonInfo.year_of_birth)
}

// int32 month_of_birth = 4;
inline void PersonInfo::clear_month_of_birth() {
  month_of_birth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_month_of_birth() const {
  return month_of_birth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::month_of_birth() const {
  // @@protoc_insertion_point(field_get:PersonInfo.month_of_birth)
  return _internal_month_of_birth();
}
inline void PersonInfo::_internal_set_month_of_birth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  month_of_birth_ = value;
}
inline void PersonInfo::set_month_of_birth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month_of_birth(value);
  // @@protoc_insertion_point(field_set:PersonInfo.month_of_birth)
}

// int32 day_of_birth = 5;
inline void PersonInfo::clear_day_of_birth() {
  day_of_birth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_day_of_birth() const {
  return day_of_birth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::day_of_birth() const {
  // @@protoc_insertion_point(field_get:PersonInfo.day_of_birth)
  return _internal_day_of_birth();
}
inline void PersonInfo::_internal_set_day_of_birth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_of_birth_ = value;
}
inline void PersonInfo::set_day_of_birth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day_of_birth(value);
  // @@protoc_insertion_point(field_set:PersonInfo.day_of_birth)
}

// int32 race_concept_id = 6;
inline void PersonInfo::clear_race_concept_id() {
  race_concept_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_race_concept_id() const {
  return race_concept_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::race_concept_id() const {
  // @@protoc_insertion_point(field_get:PersonInfo.race_concept_id)
  return _internal_race_concept_id();
}
inline void PersonInfo::_internal_set_race_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  race_concept_id_ = value;
}
inline void PersonInfo::set_race_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_race_concept_id(value);
  // @@protoc_insertion_point(field_set:PersonInfo.race_concept_id)
}

// int32 ethnicity_concept_id = 7;
inline void PersonInfo::clear_ethnicity_concept_id() {
  ethnicity_concept_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_ethnicity_concept_id() const {
  return ethnicity_concept_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::ethnicity_concept_id() const {
  // @@protoc_insertion_point(field_get:PersonInfo.ethnicity_concept_id)
  return _internal_ethnicity_concept_id();
}
inline void PersonInfo::_internal_set_ethnicity_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ethnicity_concept_id_ = value;
}
inline void PersonInfo::set_ethnicity_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ethnicity_concept_id(value);
  // @@protoc_insertion_point(field_set:PersonInfo.ethnicity_concept_id)
}

// int32 location_id = 8;
inline void PersonInfo::clear_location_id() {
  location_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_location_id() const {
  return location_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::location_id() const {
  // @@protoc_insertion_point(field_get:PersonInfo.location_id)
  return _internal_location_id();
}
inline void PersonInfo::_internal_set_location_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_id_ = value;
}
inline void PersonInfo::set_location_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location_id(value);
  // @@protoc_insertion_point(field_set:PersonInfo.location_id)
}

// int32 provider_id = 9;
inline void PersonInfo::clear_provider_id() {
  provider_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_provider_id() const {
  return provider_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::provider_id() const {
  // @@protoc_insertion_point(field_get:PersonInfo.provider_id)
  return _internal_provider_id();
}
inline void PersonInfo::_internal_set_provider_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  provider_id_ = value;
}
inline void PersonInfo::set_provider_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_provider_id(value);
  // @@protoc_insertion_point(field_set:PersonInfo.provider_id)
}

// int32 care_site_id = 10;
inline void PersonInfo::clear_care_site_id() {
  care_site_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_care_site_id() const {
  return care_site_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::care_site_id() const {
  // @@protoc_insertion_point(field_get:PersonInfo.care_site_id)
  return _internal_care_site_id();
}
inline void PersonInfo::_internal_set_care_site_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  care_site_id_ = value;
}
inline void PersonInfo::set_care_site_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_care_site_id(value);
  // @@protoc_insertion_point(field_set:PersonInfo.care_site_id)
}

// string person_source_value = 11;
inline void PersonInfo::clear_person_source_value() {
  person_source_value_.ClearToEmpty();
}
inline const std::string& PersonInfo::person_source_value() const {
  // @@protoc_insertion_point(field_get:PersonInfo.person_source_value)
  return _internal_person_source_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PersonInfo::set_person_source_value(ArgT0&& arg0, ArgT... args) {
 
 person_source_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PersonInfo.person_source_value)
}
inline std::string* PersonInfo::mutable_person_source_value() {
  std::string* _s = _internal_mutable_person_source_value();
  // @@protoc_insertion_point(field_mutable:PersonInfo.person_source_value)
  return _s;
}
inline const std::string& PersonInfo::_internal_person_source_value() const {
  return person_source_value_.Get();
}
inline void PersonInfo::_internal_set_person_source_value(const std::string& value) {
  
  person_source_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PersonInfo::_internal_mutable_person_source_value() {
  
  return person_source_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PersonInfo::release_person_source_value() {
  // @@protoc_insertion_point(field_release:PersonInfo.person_source_value)
  return person_source_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PersonInfo::set_allocated_person_source_value(std::string* person_source_value) {
  if (person_source_value != nullptr) {
    
  } else {
    
  }
  person_source_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), person_source_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PersonInfo.person_source_value)
}

// string gender_source_value = 12;
inline void PersonInfo::clear_gender_source_value() {
  gender_source_value_.ClearToEmpty();
}
inline const std::string& PersonInfo::gender_source_value() const {
  // @@protoc_insertion_point(field_get:PersonInfo.gender_source_value)
  return _internal_gender_source_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PersonInfo::set_gender_source_value(ArgT0&& arg0, ArgT... args) {
 
 gender_source_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PersonInfo.gender_source_value)
}
inline std::string* PersonInfo::mutable_gender_source_value() {
  std::string* _s = _internal_mutable_gender_source_value();
  // @@protoc_insertion_point(field_mutable:PersonInfo.gender_source_value)
  return _s;
}
inline const std::string& PersonInfo::_internal_gender_source_value() const {
  return gender_source_value_.Get();
}
inline void PersonInfo::_internal_set_gender_source_value(const std::string& value) {
  
  gender_source_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PersonInfo::_internal_mutable_gender_source_value() {
  
  return gender_source_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PersonInfo::release_gender_source_value() {
  // @@protoc_insertion_point(field_release:PersonInfo.gender_source_value)
  return gender_source_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PersonInfo::set_allocated_gender_source_value(std::string* gender_source_value) {
  if (gender_source_value != nullptr) {
    
  } else {
    
  }
  gender_source_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gender_source_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PersonInfo.gender_source_value)
}

// int32 gender_source_concept_id = 13;
inline void PersonInfo::clear_gender_source_concept_id() {
  gender_source_concept_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_gender_source_concept_id() const {
  return gender_source_concept_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::gender_source_concept_id() const {
  // @@protoc_insertion_point(field_get:PersonInfo.gender_source_concept_id)
  return _internal_gender_source_concept_id();
}
inline void PersonInfo::_internal_set_gender_source_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gender_source_concept_id_ = value;
}
inline void PersonInfo::set_gender_source_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gender_source_concept_id(value);
  // @@protoc_insertion_point(field_set:PersonInfo.gender_source_concept_id)
}

// string race_source_value = 14;
inline void PersonInfo::clear_race_source_value() {
  race_source_value_.ClearToEmpty();
}
inline const std::string& PersonInfo::race_source_value() const {
  // @@protoc_insertion_point(field_get:PersonInfo.race_source_value)
  return _internal_race_source_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PersonInfo::set_race_source_value(ArgT0&& arg0, ArgT... args) {
 
 race_source_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PersonInfo.race_source_value)
}
inline std::string* PersonInfo::mutable_race_source_value() {
  std::string* _s = _internal_mutable_race_source_value();
  // @@protoc_insertion_point(field_mutable:PersonInfo.race_source_value)
  return _s;
}
inline const std::string& PersonInfo::_internal_race_source_value() const {
  return race_source_value_.Get();
}
inline void PersonInfo::_internal_set_race_source_value(const std::string& value) {
  
  race_source_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PersonInfo::_internal_mutable_race_source_value() {
  
  return race_source_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PersonInfo::release_race_source_value() {
  // @@protoc_insertion_point(field_release:PersonInfo.race_source_value)
  return race_source_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PersonInfo::set_allocated_race_source_value(std::string* race_source_value) {
  if (race_source_value != nullptr) {
    
  } else {
    
  }
  race_source_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), race_source_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PersonInfo.race_source_value)
}

// int32 race_source_concept_id = 15;
inline void PersonInfo::clear_race_source_concept_id() {
  race_source_concept_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_race_source_concept_id() const {
  return race_source_concept_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::race_source_concept_id() const {
  // @@protoc_insertion_point(field_get:PersonInfo.race_source_concept_id)
  return _internal_race_source_concept_id();
}
inline void PersonInfo::_internal_set_race_source_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  race_source_concept_id_ = value;
}
inline void PersonInfo::set_race_source_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_race_source_concept_id(value);
  // @@protoc_insertion_point(field_set:PersonInfo.race_source_concept_id)
}

// string ethnicity_source_value = 16;
inline void PersonInfo::clear_ethnicity_source_value() {
  ethnicity_source_value_.ClearToEmpty();
}
inline const std::string& PersonInfo::ethnicity_source_value() const {
  // @@protoc_insertion_point(field_get:PersonInfo.ethnicity_source_value)
  return _internal_ethnicity_source_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PersonInfo::set_ethnicity_source_value(ArgT0&& arg0, ArgT... args) {
 
 ethnicity_source_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PersonInfo.ethnicity_source_value)
}
inline std::string* PersonInfo::mutable_ethnicity_source_value() {
  std::string* _s = _internal_mutable_ethnicity_source_value();
  // @@protoc_insertion_point(field_mutable:PersonInfo.ethnicity_source_value)
  return _s;
}
inline const std::string& PersonInfo::_internal_ethnicity_source_value() const {
  return ethnicity_source_value_.Get();
}
inline void PersonInfo::_internal_set_ethnicity_source_value(const std::string& value) {
  
  ethnicity_source_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PersonInfo::_internal_mutable_ethnicity_source_value() {
  
  return ethnicity_source_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PersonInfo::release_ethnicity_source_value() {
  // @@protoc_insertion_point(field_release:PersonInfo.ethnicity_source_value)
  return ethnicity_source_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PersonInfo::set_allocated_ethnicity_source_value(std::string* ethnicity_source_value) {
  if (ethnicity_source_value != nullptr) {
    
  } else {
    
  }
  ethnicity_source_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ethnicity_source_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PersonInfo.ethnicity_source_value)
}

// int32 ethnicity_source_concept_id = 17;
inline void PersonInfo::clear_ethnicity_source_concept_id() {
  ethnicity_source_concept_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_ethnicity_source_concept_id() const {
  return ethnicity_source_concept_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::ethnicity_source_concept_id() const {
  // @@protoc_insertion_point(field_get:PersonInfo.ethnicity_source_concept_id)
  return _internal_ethnicity_source_concept_id();
}
inline void PersonInfo::_internal_set_ethnicity_source_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ethnicity_source_concept_id_ = value;
}
inline void PersonInfo::set_ethnicity_source_concept_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ethnicity_source_concept_id(value);
  // @@protoc_insertion_point(field_set:PersonInfo.ethnicity_source_concept_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_clue_2eproto
